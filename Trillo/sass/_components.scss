/////////////////////////////////////////////
// LOGO
.logo {
  height: 3.25rem;
  margin-left: 2rem;
}

/////////////////////////////////////////////
// SEARCH
.search {
  flex: 0 0 40%; // We use this to define THIS flex item's width

  display: flex; // We are also making this a new flex container for its children
  align-items: center;
  justify-content: center;

  @media only screen and (max-width: $bp-smallest) {
    order: 1; // This will make that search the last flex element
    flex: 0 0 100%; // From this bp we want it to span whole width
    background-color: var(--color-grey-light-2);
  }

  &__input {
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    background-color: var(--color-grey-light-2);
    border: none;
    padding: 0.7rem 2rem;
    border-radius: 50rem; // Can be high number just to round the edges
    width: 90%;
    transition: all 0.2s;
    margin-right: -3.25rem; // Coz we want button to be inside input element

    &:focus {
      outline: none;
      width: 100%;
      background-color: var(--color-grey-light-3);
    }

    &::-webkit-input-placeholder {
      font-size: inherit;
      font-weight: 100;
      color: var(--color-grey-light-4);
    }
  }

  // Adjacent selector
  &__input:focus + &__button {
    background-color: var(--color-grey-light-3);
  }

  &__button {
    border: none;
    background-color: var(--color-grey-light-2); // We want it to be same color as input

    &:focus {
      outline: none;
    }

    &:active {
      transform: translateY(2px); // Creates the button being pushed down effect
    }
  }

  &__icon {
    height: 2rem;
    width: 2rem;
    fill: var(--color-grey-dark-3); // This gives the svg its color
  }
}

/////////////////////////////////////////////
// USER NAVIGATION
.user-nav {
  // We do this, coz parent(header) had align-items: center, but we want this elm to stretch and fill full header height
  align-self: stretch; // This is a flex-elm property, as its parent was display:flex

  display: flex; // We are also making this a new flex container for its children
  align-items: center; // Its children must be aligned vert center

  // All direct children. Know your HTML xD
  & > * {
    padding: 0 2rem;
    cursor: pointer;
    height: 100%;
    display: flex;
    align-items: center;

    &:hover {
      background-color: var(--color-grey-light-2);
    }
  }

  &__icon-box {
    position: relative;
  }

  &__icon {
    height: 2.25rem;
    width: 2.25rem;
    fill: var(--color-grey-dark-2);
  }

  &__notification {
    font-size: 0.8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 50%;
    background-color: var(--color-primary);
    color: #fff;
    position: absolute;
    top: 1.5rem;
    right: 1.1rem;

    display: flex; // We are gonna use this for text alignment as well! HA HA!
    justify-content: center;
    align-items: center;
  }

  &__user-photo {
    height: 3.5rem;
    border-radius: 50%;
    margin-right: 1rem;
  }
}

/////////////////////////////////////////////
// SIDE NAVIGATION

.side-nav {
  font-size: 1.4rem;
  list-style: none;
  margin-top: 3.5rem;

  @media only screen and (max-width: $bp-medium) {
    display: flex;
    margin-top: 0;
  }

  &__item {
    position: relative;

    &:not(:last-child) {
      margin-bottom: 0.5rem;

      @media only screen and (max-width: $bp-medium) {
        margin-bottom: 0;
      }
    }

    @media only screen and (max-width: $bp-medium) {
      flex: 1; // We wanna give each flex item to gow as much as they can
    }
  }

  // This is used for the nicer cooler animation
  &__item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 3px; // This is the property we are animating
    background-color: var(--color-primary);
    transform: scaleY(0);
    // On width, we add .2s delay just to ensure we see the scaleY transform first
    transition: transform 0.2s, width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s,
      background-color 0.1s;
  }

  &__item:hover::before,
  &__item--active::before {
    transform: scaleY(1);
    width: 100%; // This is the property we are animating
  }

  &__item:active::before {
    background-color: var(--color-primary-light);
  }

  &__link:link,
  &__link:visited {
    color: var(--color-grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    display: block; // Take full width
    padding: 1.5rem 3rem;
    position: relative;
    z-index: 10; // Just to be above the before element. Pos needs t be relative for this

    display: flex;
    align-items: center;

    @media only screen and (max-width: $bp-medium) {
      justify-content: center;
      padding: 2rem;
    }

    @media only screen and (max-width: $bp-small) {
      flex-direction: column;
      padding: 1.5rem 0.5rem;
    }
  }

  &__icon {
    width: 1.75rem;
    height: 1.75rem;
    margin-right: 2rem;
    fill: currentColor; // The color of the parent element. It also inherits any color changes that happen on parent due to hover, etc. Very useful

    @media only screen and (max-width: $bp-small) {
      margin-right: 0;
      margin-bottom: 0.7rem;
      width: 1.5rem;
      height: 1.5rem;
    }
  }

  &__title {
  }
}

/////////////////////////////////////////////
// LEGAL TEXT

.legal {
  font-size: 1.2rem;
  text-align: center;
  padding: 2.5rem;
  color: var(--color-grey-light-4);

  @media only screen and (max-width: $bp-medium) {
    display: none;
  }
}

/////////////////////////////////////////////
// GALLERY

.gallery {
  display: flex;
  overflow: hidden;

  &__item {
    position: relative;
    cursor: pointer;
  }

  &__photo {
    width: 100%; // Always define photo width in % to keep them responsive/fluid
    display: block; // To avoid small space underneath animation if left as an inline element. An image must ALWAYS be a block or an inline block.
    backface-visibility: hidden; // To fix small shaky glitches
    transition: all 0.5s;
  }

  &__caption {
    @include absCenter;
    color: #fff;
    text-transform: uppercase;
    font-size: 1.7rem;
    width: 100%;
    text-align: center;
    opacity: 0;
    transition: all 0.5s;
    backface-visibility: hidden; // To fix small shaky glitches
  }

  &__item:hover &__photo {
    filter: blur(3px) brightness(50%);
  }

  &__item:hover &__caption {
    opacity: 1;
  }
}

/////////////////////////////////////////////
// HOTEL OVERVIEW
.overview {
  display: flex;
  // justify-content: space-between; This is not best here
  align-items: center;
  border-bottom: var(--line);

  &__heading {
    font-size: 2.25rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
      padding: 1.25rem 2rem;
    }
  }

  &__stars {
    margin-right: auto; // This when used inside a flex item works WONDERS! Best to create a spacer space
    display: flex; // This causes just a slight spacing change. Check in dev tools
  }

  &__icon-star,
  &__icon-location {
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary);
  }

  &__icon-location {
    margin-right: 0.5rem;
  }

  &__location {
    font-size: 1.2rem;
    display: flex;
    align-items: center;
  }

  &__rating {
    align-self: stretch; // As we only want this flex item to fill vert fully
    padding: 0 2.25rem;
    background-color: var(--color-primary);
    margin-left: 2rem;
    color: #fff;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    @media only screen and (max-width: $bp-small) {
      padding: 0 1.5rem;
    }
  }

  &__rating-average {
    font-size: 2.25rem;
    font-weight: 300;

    margin-bottom: -3px; // Just to decrease space between this and rating-count

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
    }
  }

  &__rating-count {
    font-size: 0.8rem;
    text-transform: uppercase;

    @media only screen and (max-width: $bp-small) {
      font-size: 0.5rem;
    }
  }
}

/////////////////////////////////////////////
// BUTTON INLINE
.btn-inline {
  border: none;
  color: var(--color-primary);
  font-size: inherit; // We want to reuse this in other parent elms with diff font-size
  border-bottom: 1px solid currentColor; // Will have same color as text, and to auto update as per hover changes
  padding-bottom: 2px;
  display: inline-block;
  background-color: transparent;
  cursor: pointer;
  transition: all 0.2s;

  & span {
    margin-left: 0.3rem;
    transition: margin-left 0.2s;
  }

  &:hover {
    color: var(--color-grey-dark-1);

    span {
      margin-left: 0.8rem;
    }
  }

  &:focus {
    outline: none;
    animation: pulsate 1s infinite;
  }
}

@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: none;
  }

  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, 0.25);
  }

  100% {
    transform: scale(1);
    box-shadow: none;
  }
}

/////////////////////////////////////////////
// PARAGRAPH
.paragraph:not(:last-of-type) {
  margin-bottom: 2rem;
}

/////////////////////////////////////////////
// LIST
.list {
  list-style: none;
  margin: 3rem 0;
  padding: 3rem 0;
  border-top: var(--line);
  border-bottom: var(--line);

  display: flex;
  flex-wrap: wrap; // let the flex item element go to the new line

  &__item {
    flex: 0 0 50%; // We use this to define width. Flex-wrap is a must
    margin-bottom: 0.7rem;
  }

  &__item::before {
    content: '';
    display: inline-block;
    height: 1rem;
    width: 1rem;
    margin-right: 0.7rem;

    // Older browsers
    background-image: url(../img/chevron-thin-right.svg);
    background-size: cover;

    // Newer browsers - masks - Check for feature support - Graceful degradation
    @supports (-webkit-mask-image: url()) or (mask-image: url()) {
      background-color: var(--color-primary);
      -webkit-mask-image: url(../img/chevron-thin-right.svg);
      -webkit-mask-size: cover;

      mask-image: url(../img/chevron-thin-right.svg);
      mask-size: cover;

      background-image: none;
    }
  }
}

/////////////////////////////////////////////
// RECOMMEND
.recommend {
  font-size: 1.03rem;
  color: var(--color-grey-dark-3);
  display: flex;
  align-items: center;
  justify-content: space-between; // We can also give margin-right: auto to push box to the right end

  &__count {
  }

  &__friends {
    display: flex; // We want all children top stay side by side
  }

  &__photo {
    box-sizing: content-box; // As in the starting, we set this to border-box, only here we need to change back to default
    height: 4rem;
    width: 4rem;
    border-radius: 50%;
    border: 3px solid #fff;

    &:not(:last-child) {
      margin-right: -2rem;
    }
  }
}

/////////////////////////////////////////////
// REVIEWS
.review {
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  margin-bottom: 3.5rem;
  position: relative; // As we are positioning the " mark absolute wrt this
  overflow: hidden;

  @media only screen and (max-width: $bp-medium) {
    padding: 2rem;
    margin-bottom: 3rem;
  }

  &__text {
    margin-bottom: 2rem;
    z-index: 10; // Only works if position is set
    position: relative;
  }

  &__user {
    display: flex;
    align-items: center;
  }

  &__photo {
    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;
    margin-right: 1.5rem;
  }

  &__user-box {
    margin-right: auto; // When used inside a flex item, it pushes content to the end
  }

  &__user-name {
    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: 0.4rem;
  }

  &__user-date {
    font-size: 1rem;
    color: var(--color-grey-dark-3);
  }

  &__rating {
    font-size: 2.2rem;
    font-weight: 300;
    color: var(--color-primary);
  }

  &::before {
    content: '\201C'; // This is an HTML entity, but in CSS used differently. Refer: https://css-tricks.com/snippets/html/glyphs/
    position: absolute;
    top: -2.75rem;
    left: -1rem;
    font-size: 20rem;
    color: var(--color-grey-light-2);
    font-family: sans-serif;
    line-height: 1;
    z-index: 1;
  }
}

/////////////////////////////////////////////
// CALL TO ACTION
.cta {
  padding: 3.5rem 0;
  text-align: center;

  @media only screen and (max-width: $bp-medium) {
    padding: 2.5rem 0;
  }

  &__book-now {
    font-size: 1.5rem; // NOTE, bigger font sizes is good with thinner/lower font weights
    font-weight: 300;
    text-transform: uppercase;
    margin-bottom: 2.5rem;
  }
}

/////////////////////////////////////////////
// CALL TO ACTION BUTTON
.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border-radius: 50rem; // Just a large value so that it is properly curved
  border: none;
  background-image: linear-gradient(
    to right,
    var(--color-primary-light),
    var(--color-primary-dark)
  );
  color: #fff;
  position: relative;
  overflow: hidden; // Nice way to hide elements
  cursor: pointer;

  & > * {
    display: inline-block; // Coz we wanna use padding and stuff, as the button parent element is not a block element
    height: 100%;
    width: 100%;
    transition: all 0.2s;
  }

  &__visible {
    padding: 2rem 7.5rem;
  }

  &__invisible {
    position: absolute;
    left: 0;
    top: -100%; // Move up exactly the size of the element
    padding: 2rem 0;
  }

  &:hover {
    background-image: linear-gradient(
      to left,
      var(--color-primary-light),
      var(--color-primary-dark)
    );
  }

  &:hover &__visible {
    transform: translateY(100%); // Translates 100% of its height down
  }

  &:hover &__invisible {
    top: 0;
  }

  &:focus {
    outline: none;
    animation: pulsate 1s linear infinite;
  }
}
